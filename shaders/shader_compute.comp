#version 450

struct Particle {
	vec2 position;
	vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[ ];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[ ];
};

layout(push_constant) uniform PushConstants {
    vec2 gravity;  // Gravity vector (e.g., vec2(0.0, 9.8)  vulkan has flipped y axis)
} pc;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  

    Particle particleIn = particlesIn[index];
    Particle particleOut;

    particleOut.velocity = particleIn.velocity + pc.gravity * ubo.deltaTime;

    particleOut.position = particleIn.position + particleOut.velocity * ubo.deltaTime;

    // Handle bouncing off the window borders
    if ((particleOut.position.x <= -1.0) || (particleOut.position.x >= 1.0)) {
        particleOut.velocity.x = -particleOut.velocity.x;
        particleOut.position.x = clamp(particleOut.position.x, -1.0, 1.0);
    }
    if ((particleOut.position.y <= -1.0) || (particleOut.position.y >= 1.0)) {
        particleOut.velocity.y = -particleOut.velocity.y;
        particleOut.position.y = clamp(particleOut.position.y, -1.0, 1.0);
    }

    // Copy color and write the updated particle to the output buffer
    // particleOut.color = particleIn.color;
    
    // Apply changes
    particlesOut[index] = particleOut;
}
