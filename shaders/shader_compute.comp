#version 450

struct Particle {
    vec2 position;
    vec2 velocity;
    vec4 color;
};

layout (binding = 0) uniform ParameterUBO {
    float deltaTime;
} ubo;

layout(std140, binding = 1) readonly buffer ParticleSSBOIn {
   Particle particlesIn[];
};

layout(std140, binding = 2) buffer ParticleSSBOOut {
   Particle particlesOut[];
};

// Constants for SPH
const float REST_DENSITY = 0.0000010;
const float GAS_CONSTANT = 0.0000020;
const float H = 0.0000000045; // Smoothing length
const float HSQ = H * H;
const float MASS = 0.00000002;
const float PI = 3.14159265358979323846;

// Viscosity constants
const float VISCOSITY = 0.0250;

// Pressure projection constants
const int ITERATIONS = 5;

// Pressure computation
float poly6(float r2) {
    if (r2 >= HSQ) return 0.0;
    float term = HSQ - r2;
    return 315.0 / (64.0 * PI * pow(H, 9)) * term * term * term;
}

vec2 spikyGradient(vec2 r) {
    float r_len = length(r);
    if (r_len == 0.0 || r_len >= H) return vec2(0.0);
    float term = (H - r_len) * (H - r_len);
    return -r / r_len * 45.0 / (PI * pow(H, 6)) * term;
}

float viscosityLaplacian(float r2) {
    if (r2 >= HSQ) return 0.0;
    return 45.0 / (PI * pow(H, 6)) * (H - sqrt(r2));
}

layout(push_constant) uniform PushConstants {
    vec2 gravity;  // Gravity vector
} pc;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

void main() 
{
    uint index = gl_GlobalInvocationID.x;  
    Particle particle = particlesIn[index];
    
    // Compute density
    float density = 0.0;
    for(uint i = 0; i < particlesIn.length(); ++i) {
        vec2 r = particlesIn[i].position - particle.position;
        float r2 = dot(r, r);
        density += MASS * poly6(r2);
    }

    // Compute pressure
    float pressure = GAS_CONSTANT * (density - REST_DENSITY);

    // Compute pressure force
    vec2 pressureForce = vec2(0.0);
    // Compute viscosity force
    vec2 viscosityForce = vec2(0.0);
    for(uint i = 0; i < particlesIn.length(); ++i) {
        if(i == index) continue;
        vec2 r = particlesIn[i].position - particle.position;
        float r_len = length(r);
        if(r_len < H && r_len > 0.0){
            // Pressure force contribution
            float density_j = REST_DENSITY; // Simplified density
            float pressure_j = GAS_CONSTANT * (density - REST_DENSITY); // Simplified
            pressureForce += -r / r_len * MASS * (pressure + pressure_j) / (2.0 * density) * spikyGradient(r).x;

            // Viscosity force contribution
            vec2 vel_diff = particlesIn[i].velocity - particle.velocity;
            viscosityForce += VISCOSITY * MASS * (vel_diff) / density * viscosityLaplacian(dot(r, r));
        }
    }

    // Update velocity with pressure and viscosity forces
    particle.velocity += (pressureForce + viscosityForce) / density * ubo.deltaTime;

    // Update position with new velocity
    particle.position += particle.velocity * ubo.deltaTime;

    // Handle bouncing off the window borders
    if ((particle.position.x <= -1.0) || (particle.position.x >= 1.0)) {
        particle.velocity.x = -particle.velocity.x;
        particle.position.x = clamp(particle.position.x, -1.0, 1.0);
    }
    if ((particle.position.y <= -1.0) || (particle.position.y >= 1.0)) {
        particle.velocity.y = -particle.velocity.y;
        particle.position.y = clamp(particle.position.y, -1.0, 1.0);
    }

    // Pressure Projection for Incompressibility
    // Iterative solver (Gauss-Seidel)
    for(int iter = 0; iter < ITERATIONS; iter++) {
        float proj_pressure = 0.0;
        float proj_divergence = 0.0;
        // Compute divergence
        for(uint i = 0; i < particlesIn.length(); ++i) {
            if(i == index) continue;
            vec2 r = particlesIn[i].position - particle.position;
            float r_len = length(r);
            if(r_len < H && r_len > 0.0){
                proj_divergence += dot(particlesIn[i].velocity - particle.velocity, spikyGradient(r));
            }
        }
        proj_pressure = proj_divergence / (REST_DENSITY * ITERATIONS);

        // Correct velocities
        for(uint i = 0; i < particlesIn.length(); ++i) {
            if(i == index) continue;
            vec2 r = particlesIn[i].position - particle.position;
            float r_len = length(r);
            if(r_len < H && r_len > 0.0){
                float p = proj_pressure;
                particle.velocity += spikyGradient(r) * (p / REST_DENSITY);
            }
        }
    }

    // Write the updated particle to the output buffer
    particlesOut[index] = particle;
}